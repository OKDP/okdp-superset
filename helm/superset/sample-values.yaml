#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

okdp:
  # Superset configuration
  superset:
    superset_secret_key: "22NJRoghIFHFK6vo7wWB+m/8TL//eKEo7phKEhGtsGiBLkLpx5WKA7k7"
    extra_config: &extra_config |
      from datetime import timedelta
      # Set up max age of session to 8 hours
      PERMANENT_SESSION_LIFETIME = timedelta(hours=8)
      # This will make sure the redirect_uri is properly computed, even with SSL offloading
      ENABLE_PROXY_FIX = True
    feature_flags: &feature_flags |
      # https://github.com/apache/superset/blob/master/RESOURCES/FEATURE_FLAGS.md
      FEATURE_FLAGS = {
        "DASHBOARD_RBAC": True,
        "EMBEDDED_SUPERSET": True,
        "EMBEDDABLE_CHARTS": True,
        "ENABLE_TEMPLATE_PROCESSING": True,
        "DASHBOARD_NATIVE_FILTERS": True,
        "DASHBOARD_CROSS_FILTERS": True,
      }
    load_examples:
      enabled: true
      #SQLALCHEMY_EXAMPLES_URI: 'sqlite:////app/superset_home/examples.db'
      SQLALCHEMY_EXAMPLES_URI: "postgresql+psycopg2://superset:superset@{{ .Release.Name }}-postgresql:5432"
      #SQLALCHEMY_EXAMPLES_URI: 'trino://trino@trino:8080/nessie/examples'

  # Oauth2 configuration
  oauth:
    enabled: true
    #provider: dex
    #base_url: 'https://dex.okdp.sandbox/dex'
    #client_id: "dex-oidc"
    #For public clients, the 'client_secret' is not required
    #client_secret: "Not@SecurePassw0rd"
    provider: keycloak
    base_url: "https://keycloak.okdp.sandbox/auth/realms/master/protocol/openid-connect"
    client_id: "keycloak-oidc"
    #For public clients, the 'client_secret' is not required
    client_secret: "1WZiYMkcPgCwncmqYz4ab1l7J6OqFrEo"
    #scope: "openid profile email groups"
    scope: "openid profile email roles"
    #use_pkce: true
    use_pkce: false
    ssl_certificate_verify: "False"
    auth_registration: &auth_registration |
      AUTH_USER_REGISTRATION = True
      AUTH_ROLE_PUBLIC = "Public"
      AUTH_USER_REGISTRATION_ROLE = "Public"
      AUTH_ROLES_SYNC_AT_LOGIN = True
    oauth2_superset_roles_mapping: &oauth2_superset_roles_mapping |
      AUTH_ROLES_MAPPING = {
        # dex
        "admins": ["Admin"],
        "team1": ["Gamma", "sql_lab"],
        "team2": ["Alpha"],
        # keycloack
        "/team1": ["Admin"],
      }

superset:
  supersetNode:
    # Connections to an existing database and cache
    connections:
      # -- Change in case of bringing your own redis and then also set redis.enabled:false
      redis_host: "{{ .Release.Name }}-redis-headless"
      redis_port: "6379"
      redis_user: ""
      # redis_password: superset
      redis_cache_db: "1"
      redis_celery_db: "0"
      # Or SSL port is usually 6380
      # Update following for using Redis with SSL
      redis_ssl:
        enabled: false
        ssl_cert_reqs: CERT_NONE
      # You need to change below configuration incase bringing own PostgresSQL instance and also set postgresql.enabled:false
      db_host: "{{ .Release.Name }}-postgresql"
      db_port: "5432"
      db_user: superset
      db_pass: superset
      db_name: superset

  # If no existing redis cache provided, enable to use the bitnami redis cache
  # The credentials should match 'superset.supersetNode.connections'
  redis:
    enabled: true
    architecture: standalone
    auth:
      ## Enable password authentication
      enabled: false
      ## Credentials: ## superset.supersetNode.connections.redis_*

  ingress:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-staging
      acme.cert-manager.io/http01-edit-in-place: "true"
      # kubernetes.io/tls-acme: "true"
      ## Extend timeout to allow long running queries.
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    path: /
    pathType: ImplementationSpecific
    hosts:
      - superset.okdp.sandbox
    tls:
      - hosts:
          - superset.okdp.sandbox
        secretName: "superset-tls-secret"

  configOverrides:
    auth_registration: *auth_registration
    oauth_to_superset_roles_mapping: *oauth2_superset_roles_mapping
    extra_config: *extra_config
    feature_flags: *feature_flags
